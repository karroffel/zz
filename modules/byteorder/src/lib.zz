inline using "lib.h"::{BYTE_ORDER};

// host to big endian

pub inline fn to_be16(u16 x) -> u16 {
    BYTE_ORDER;
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return bswap_16(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be16(u16 x) -> u16 {
    return to_be16(x);
}

pub inline fn to_be32(u32 x) -> u32{
    BYTE_ORDER;
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return bswap_32(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be32(u32 x) -> u32 {
    return to_be32(x);
}

pub inline fn to_be64(u64 x) -> u64 {
    BYTE_ORDER;
    @{{
        #if BYTE_ORDER == LITTLE_ENDIAN
            return bswap_64(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_be64(u64  x) -> u64 {
    return to_be64(x);
}



// host to little endian

pub inline fn to_le16(u16 x) -> u16 {
    BYTE_ORDER;
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return bswap_16(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le16(u16 x) -> u16 {
    return to_le16(x);
}

pub inline fn to_le32(u32 x) -> u32{
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return bswap_32(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le32(u32 x) -> u32 {
    return to_le32(x);
}

pub inline fn to_le64(u64 x) -> u64 {
    BYTE_ORDER;
    @{{
        #if BYTE_ORDER == BIG_ENDIAN
            return bswap_64(x);
        #else
            return x;
        #endif
    }}@
}
pub inline fn from_le64(u64 x) -> u64 {
    return to_le64(x);
}




